terraform {
  required_version = ">= 1.5.0"
  required_providers {
    proxmox = {
      source  = "bpg/proxmox"
      version = "~> 0.45"
    }
  }
}


##################
# Provider
##################
provider "proxmox" {
  endpoint  = var.pm_endpoint
  api_token = var.api_token
  insecure  = var.pm_insecure

  ssh {
    username    = "root"
    private_key = file("~/.ssh/id_ed25519")
      node {
        name    = "pve"
        address = "192.168.1.96"
      }
  }

}

############################################
# Data (find template by tags; safe fallback)
############################################
data "proxmox_virtual_environment_vms" "template" {
  node_name = var.target_node
  tags      = ["template", var.template_tag]
}

locals {
  template_found_count = length(try(data.proxmox_virtual_environment_vms.template.vms, []))
  template_vm_id_safe  = try(one(data.proxmox_virtual_environment_vms.template.vms).vm_id, var.template_vmid)

  user_data_yaml = <<-EOT
    #cloud-config
    hostname: ${var.vm_hostname}
    local-hostname: ${var.vm_hostname}
    fqdn: ${var.vm_hostname}.${var.domain}
    manage_etc_hosts: true
    package_upgrade: true
    users:
      - default
      - name: ubuntu
        sudo: ALL=(ALL) NOPASSWD:ALL
        ssh_authorized_keys:
          - ${var.ssh_public_key}
    ssh_pwauth: true
  EOT

  meta_data_yaml = <<-EOT
    {
      "instance-id": "${sha1(var.vm_hostname)}",
      "local-hostname": "${var.vm_hostname}"
    }
  EOT
}

############################################################
# Upload snippets (MUST be on a dir/NFS/CIFS storage = local)
############################################################
resource "proxmox_virtual_environment_file" "cloud_user_config" {
  content_type = "snippets"
  datastore_id = "local"              # not local-lvm
  node_name    = var.target_node
  overwrite    = true

  source_raw {
    file_name = "${var.vm_hostname}.${var.domain}-ci-user.yml"
    data      = local.user_data_yaml
  }
}

resource "proxmox_virtual_environment_file" "cloud_meta_config" {
  content_type = "snippets"
  datastore_id = "local"              # not local-lvm
  node_name    = var.target_node
  overwrite    = true

  source_raw {
    file_name = "${var.vm_hostname}.${var.domain}-ci-meta_data.yml"
    data      = local.meta_data_yaml
  }
}

#########################################
# VM (clone + cloud-init hookup)
#########################################
resource "proxmox_virtual_environment_vm" "vm" {
  name      = "${var.vm_hostname}.${var.domain}"
  node_name = var.target_node
  on_boot   = var.onboot

  agent {
    enabled = true
  }

  tags = var.vm_tags

  cpu {
    type    = "x86-64-v2-AES"
    cores   = var.cores
    sockets = var.sockets
    flags   = []
  }

  memory {
    dedicated = var.memory
  }

  network_device {
    bridge = "vmbr0"
    model  = "virtio"
  }

  lifecycle {
    ignore_changes = [network_device]
  }

  boot_order    = ["scsi0"]
  scsi_hardware = "virtio-scsi-single"

  disk {
    interface    = "scsi0"
    iothread     = true
    datastore_id = var.disk.storage
    size         = var.disk.size
    discard      = "ignore"
  }

  dynamic "disk" {
    for_each = var.additionnal_disks
    content {
      interface    = "scsi${1 + disk.key}"
      iothread     = true
      datastore_id = disk.value.storage
      size         = disk.value.size
      discard      = "ignore"
      file_format  = "raw"
    }
  }

  clone {
    vm_id        = local.template_vm_id_safe
    full         = true
    # datastore_id = var.disk.storage   # uncomment to force clone target storage
  }

  initialization {
    datastore_id = var.disk.storage
    interface    = "ide2"

    user_data_file_id = proxmox_virtual_environment_file.cloud_user_config.id
    meta_data_file_id = proxmox_virtual_environment_file.cloud_meta_config.id

    ip_config {
      ipv4 { address = "dhcp" }
    }
  }
}

#################
# Debug outputs
#################
output "template_search_count" {
  description = "How many VMs matched tags ['template', var.template_tag]?"
  value       = local.template_found_count
}

output "template_search_results" {
  description = "List of matched VMs (may be empty)"
  value       = try(data.proxmox_virtual_environment_vms.template.vms, [])
}

output "template_vmid_used" {
  description = "Template VMID actually used (falls back to var.template_vmid)"
  value       = local.template_vm_id_safe
}

output "snippet_user_file_id" {
  description = "Uploaded user-data snippet ID"
  value       = proxmox_virtual_environment_file.cloud_user_config.id
}

output "snippet_meta_file_id" {
  description = "Uploaded meta-data snippet ID"
  value       = proxmox_virtual_environment_file.cloud_meta_config.id
}

output "vm_summary" {
  description = "Created VM summary"
  value = {
    vm_id   = proxmox_virtual_environment_vm.vm.vm_id
    name    = proxmox_virtual_environment_vm.vm.name
    node    = proxmox_virtual_environment_vm.vm.node_name
    tags    = proxmox_virtual_environment_vm.vm.tags
    on_boot = proxmox_virtual_environment_vm.vm.on_boot
  }
}

output "vm_first_nic" {
  description = "First NIC (useful to confirm MAC / bridge)"
  value       = try(proxmox_virtual_environment_vm.vm.network_device[0], null)
}

output "cloud_init_debug" {
  description = "Where CI seed was created + which files were used"
  value = {
    ci_seed_datastore = var.disk.storage
    user_data_file    = proxmox_virtual_environment_file.cloud_user_config.source_raw[0].file_name
    meta_data_file    = proxmox_virtual_environment_file.cloud_meta_config.source_raw[0].file_name
  }
}
